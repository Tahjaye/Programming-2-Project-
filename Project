/*
Programmers: Tahjaye Alex Edwards, Jordayne Price, Lilly Whyte, Jahzeal Simms,
ID#                2206688             2202939        2206858       2202446

Date: March 29th 2023

Description: Trish and Shaun own a small thriving car wash which currently exceeds its processing capacity for customers.
             They use an inefficient paper-based system to document their daily activities which is currently exasperating.
             This program serves to assist in efficiency of the services provided by the car wash.
*/
//libraries
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <conio.h>
#include <stdbool.h>
#include <time.h>
#include <ctype.h>

//Macros
#define MAXSIZE 20
#define WASHSIZE 3

FILE *fh_output;//declares fh_output as a file pointer

typedef struct {
    char name[50];//stores the firstname
    char license_plate[7]; // 4 digits and 2 capital letters
    char *time;//declares a pointer to a char which will be used to store the time of the transaction
    int payment_method; // cash or card
    int services[6]; // array to store selected services//bool
    int giveTip;// a 1 or 0 randomly generated which represents if the customer wants to give a tip
    float cost; // service cost
    float totalCost;// total service cost
    float tip; // tip amount
    float receiptTotal;
    float cardfee;//stores the amount generated by the 3% card fee
} Customer;//defines the customer struct to link all the necessary data to one

//this struct stores all the total values for the daily report
typedef struct {
float washAndVacuumSales;
float engineWashSales;
float polishingSales;
float buffingSales;
float roofCleaningSales;
float detailingSales;
float totalSales;
float totalTips;
float totalCardFee;
int totalCustomers;
} DayReport;

//Enum constants
enum Paymentmethod {CASH=1 ,CARD=2};//by declaring constant the code becomes more readable
enum YesOrNo {YES=1 , NO=0};

//function prototypes
void displayMainMenu();
Customer accept_customer_info(Customer*, Customer*, int);
bool real_license_Plate(char[7]);
void displayServiceMenu();
float serviceOptions(int*);
void displayCustomerInfo();
void getCustomerServices(int*);
void store_To_File(Customer);
void populate_wash_bay(Customer *customer, Customer *wash_Bay);
void clear_wash_bay(Customer *customer, Customer *wash_Bay);
void returningCustomers();
void findReturning(Customer[99],int);
void displayReturning(Customer[99], Customer[99], int[99], int,int);
void displayDayReport(DayReport*);
//counter values
static int idx=0;// the main index value that contols the flow of the program
static int num_customers = 0;//stores the number of customers /20 different from idx since idx stores index numbers
static int num_washbay=0;//stores the number of cars in the wash bay


int main()
{
    //checks if the file already exists
    fh_output = fopen("Customers.txt", "a+");//If not it creates a blank file called Customers to store customer details
    fclose(fh_output);//closes the file



    // Initialize Struct variables as pointers then allocates memory for them as arrays
    Customer *customer;// array to store customer details
    customer = (Customer*)calloc(MAXSIZE,sizeof(Customer));//creates an Customer array with 20 elements (basically)

    Customer *wash_Bay;// array to store customer details for those in the wash bay
    wash_Bay = (Customer*)calloc(WASHSIZE, sizeof(Customer));

    DayReport *Report;//this is the report
    Report = (DayReport*)calloc(1,sizeof(DayReport));

    int mainMenuChoice;// stores the choice of the user

    printf("\tTrish & Shaun's Auto Wash Services!\n");
    do{//main loop which keeps the program running until the user want to exit

        do{//this loop validates the users input to guarantee proper output
            displayMainMenu();//this function simply prints the main menu
            scanf("%d", &mainMenuChoice);

            if(mainMenuChoice<1 || mainMenuChoice>5){
                printf("\nInvalid Option please try again\n");
            }
        }while(mainMenuChoice<1 || mainMenuChoice>5);

        //A swith is used to individually control the menu options
        switch(mainMenuChoice){
        case 1:
            printf("\nWelcome to Trish & Shaun's Auto Wash Services!\n");
            customer[idx] = accept_customer_info(customer, wash_Bay ,num_customers);//runs a function that accepts all the innformation needed from a customer
            store_To_File(customer[idx]);  //calls the function to store the customers data to the file
            displayCustomerInfo();//prints a recipt with all the customers information and totals

            idx++;//incrementing of the counter variables
            num_customers++;
            Report->totalCustomers+=1;
            break;
        case 2:
            clear_wash_bay(customer, wash_Bay);
            break;
        case 3:
            returningCustomers();//calls the function to find the returning customers
            break;
        case 4:
            displayDayReport(Report);
            break;
        case 5:
            // this case ends the program
            printf("\nThank you for visiting Trish & Shaun's Auto Wash Services!\n");
            printf("\nProgramm Exitted!!");
            return 0;
            break;
        default:
            //This option/path should never execute because of the error handling above
            printf("\nInvalid Option please try again\n");

        }
    }while(mainMenuChoice!=5);//the condition for the mail loop to exit
    return 0;
}




void displayMainMenu(){
    // display menu options
    printf( "\nWelcome to Trish & Shaun's Auto Wash Services!\n"
            "\tPlease select an option:\n"
            "1-> Accept Customer's Information & Payment\n"
    );

    if (idx!=0){
        printf( "2-> Wash Car\n"
                "3-> Display Returning Customers\n"
                "4-> Display Day's Sales Report\n");
    }
    printf("5-> Exit Program\n");
    return;
}

// Function to accept customer information and payment
Customer accept_customer_info(Customer *customer,Customer *wash_Bay,int num_customers) {
    time_t now =time(NULL);
    if (num_customers >= MAXSIZE) {
        // Display error message and return if car wash is full
        printf("Car wash is full-> Cannot accept more customers->\n");
        return *customer;
    }
    if(idx==3 && num_washbay==0){
        populate_wash_bay( customer, wash_Bay);
        num_washbay=WASHSIZE;
    }

    // Get customer information
    printf("Enter customer information:\n");
    fflush(stdin);
    printf("Enter the Customers name: ");
    scanf("%[^\n]s", customer->name);
    do{//validates the licenes plate
        fflush(stdin);
        printf("\nLicense plate number (4 digits a space and 2 capital letters) (7777 TE): ");
        scanf("%[^\n]s", customer->license_plate);
    }while(real_license_Plate(customer->license_plate)== false);

    do{//vaidates the payment option
        fflush(stdin);
        printf("\nPayment method:"
                "\n(1)CASH" "\n(2)CARD\n");
        scanf("%d", &customer->payment_method);
        if(customer->payment_method!=CASH && customer->payment_method!=CARD){
            printf("Invalid Payment Option, Try again");
        }
    }while(customer->payment_method!=CASH && customer->payment_method!=CARD);

    // Add selected services and calculate total cost
    for (int i = 0; i < 6; i++) {
    customer->services[i]=0;
    }
    for (int i = 0; i < 6; i++) {
        do{
            displayServiceMenu();
            scanf("%d", &customer->services[i]);

            if (customer->services[i] == 0) {
                break;
            } else if (customer->services[i] < 1 || customer->services[i] >6 ) {
                // Display error message and repeat if invalid service is selected
                printf("\nInvalid service selected-> Please try again->\n");
                i--;
            } else if (customer->services[i] >= 1 && customer->services[i] <=6 ) {
                // Check if service is already selected and add cost to total
                customer->cost = serviceOptions(customer->services);
                customer->totalCost+=customer->cost;

                for (int j = 0; j < i; j++) {
                    if (customer->services[i] == customer->services[j]) {
                        // Display error message and repeat if service is already selected
                        printf("\nService already selected-> Please try again->\n");
                        customer->totalCost -= customer->cost;
                        i--;
                        break;
                    }
                }
            }

        }while(customer->services[i] < 1 || customer->services[i] > 6);
        if (customer->services[i] == 0) {
            break;
        }
    }

    //Randomly generating the Tip and calculating the amount
    printf("\nWould you like to Gift a 2%% tip");
    srand(time(NULL));
    customer->giveTip = rand()%2;
    if (customer->giveTip==NO){
        printf("\nNo Tip Given");
        customer->tip= customer->cost*0;
    }else{
        printf("\nThanks for Giving a 2%% Tip");
        customer->tip= customer->cost*0.02;
    }

    //Calculating the CARD Fee (3%) amount
    if(customer->payment_method==CASH){
        customer->cardfee = customer->cost *0;
    }else if(customer->payment_method==CARD){
        customer->cardfee = customer->cost *0.03;
    }
    customer->receiptTotal = customer->totalCost + customer->tip + customer->cardfee;
    customer->time = ctime(&now);

   return *customer;
}
//validates the license plate
bool real_license_Plate(char license_Plate[7]){
    int i=0;
    //checks the size of the plate
    if (strlen(license_Plate)!=7){
        printf("\aInvalid License Plate\n");
        printf("Size must be (7)->four integers a space ' ' and two capital letters (7777 TE)\n");
        return false;
    }
    //checks if the first 4 characters are numbers
    for(i=0;i<4;i++){
        if (!isdigit(license_Plate[i])){
            printf("\aInvalid License Plate\n");
            printf("First four chatacters must be integers (->7777<- TE)\n");
            return false;
        }
    }
    //checks if there is a space between the numbers and letters
    if(license_Plate[4]!= ' '){
        printf("\aInvalid License Plate\n");
        printf("There must be a space ' ' between the four numbers and two letters (7777 TE)\n");
        return false;
    }
    //checks if the last 4 characters are capital letters
    for(i=5;i<7;i++){
        if (!isupper(license_Plate[i])){
            printf("\aInvalid License Plate\n");
            printf("Last Two chatacters must be Uppercase letters (7777 ->TE<-)\n");
            return false;
        }
    }
    return true;//only returnes true if the plate is valid
}

void displayServiceMenu(){
    // display service options
    printf("\nSelect services:\n"
            "1-> Wash and Vacuum - $2500->00\n"
            "2-> Engine Wash - $2000->00\n"
            "3-> Polishing - $3500->00\n"
            "4-> Buffing - $5500->00\n"
            "5-> Roof Cleaning - $3200->00\n"
            "6-> Detailing/Interior Shampooing - $7500->00\n"
            "(Enter 0 to FINISH):\n "
    );
    return;
}
//this simply seperates the switch from its parent function
float serviceOptions(int *services){
    float cost=0;
    switch (*services) {
    case 1://Wash and Vacuum
        cost = 2500.00;
        break;
    case 2://Engine Wash
        cost = 2000.00;
        break;
    case 3://Polishing
        cost = 3500.00;
        break;
    case 4://Buffing
        cost = 5500.00;
        break;
    case 5://Roof Cleaning
        cost = 3200.00;
        break;
    case 6://Detailing/Interior Shampooing
        cost = 7500.00;
        break;
    }
    return cost;
}

//this function stores customer information to the file
void store_To_File(Customer customer){
    fh_output = fopen("Customers.txt", "a");

    fwrite(&customer, sizeof(Customer),1,fh_output);

    fclose(fh_output);

    return;
}

//displays each customers reciept after they have completed payment
void displayCustomerInfo(){
    Customer *customer;
    fh_output = fopen("Customers.txt", "r");

    fread(&*customer,sizeof(Customer),idx+1,fh_output);

    printf("\n\nName: %s", customer->name);
    printf("\nlicense Plate Number: %s", customer->license_plate);
    printf("\nPayment method: ");
    if(customer->payment_method==CASH){
        printf("CASH");
    }else if(customer->payment_method==CARD){
        printf("CARD");
    }
    printf("\n\tServices");
    getCustomerServices(customer->services);
    printf("\nThe total service Cost is $%.2f", customer->totalCost);
    if (customer->giveTip==NO){
        printf("\nNo Tip Given");
    }else if (customer->giveTip==YES){
        printf("\nThanks for Giving a 2%% Tip of: $%->2f", customer->tip);
    }
    if(customer->payment_method==CARD){
        printf("\n3%% CARDFEE $%->2f", customer->cardfee);
    }
    printf("\nThe Grand Total is: $%->2f", customer->receiptTotal);
    printf("\nTransaction time: %s",customer->time);
    printf("\nThanks for making it Trish & Shaun's Auto Wash Services!\n");
    printf("\n\aCome Again \\O/...");
    fclose(fh_output);
    return;
}

//this function simply checks which services the customer selected and prints it out
void getCustomerServices(int *services){
    int i;
    for(i=0;i<6;i++){
        switch (*services) {
        case 1:
            printf("\nWash and Vacuum");
            break;
        case 2:
            printf("\nEngine Wash");
            break;
        case 3:
            printf("\nPolishing");
            break;
        case 4:
            printf("\nBuffing");
            break;
        case 5:
            printf("\nRoof Cleaning");
            break;
        case 6:
            printf("\nDetailing/Interior Shampooing");
            break;
        }
        services++;//increments the pointer and therefore the value in the array
    }
    return;
}


//this function adds cars to the wash bay from the waiting list
void populate_wash_bay(Customer *customer, Customer *wash_Bay){
    int i=0;

    Customer cust = *customer;
    Customer wash = *wash_Bay;
    Customer *temp;// array to store customer details
    temp = (Customer*)calloc(MAXSIZE+WASHSIZE,sizeof(Customer));//creates an Customer array with 23 elements (basically)

    //whats happening here is the we are moving the first three cars to the wash bay them we move the other cars up in the line
    if(num_washbay==WASHSIZE){
        //this moves the first three cars to the wash bay
        for (i=0;i<WASHSIZE;i++){
            *wash_Bay = *customer;
            wash_Bay++;
            customer++;
        }
        *customer = cust;//simply resets the pointer to the begining of the array, necessary because we incremented it
        *wash_Bay = wash;

        //this sets the customers array of size 20 to the first 20 elements of the temp array leaving the last three blank(which is important)
        for(i=0;i<MAXSIZE;i++){
            *temp = *customer;
            customer++;
        }
        *customer = cust;

        temp+=3;//increments the temp pointer by three which puts the start of the array at the 4th element
        //because the first three cars went to the wash bay
        //this is also why this array was initialized as size 23, so now the temp array is of size 20, same as customer

        //reassignes the new customer array which is just the original shifted three elements to the right
        //note that three spaces have been freed from the customers array because indexes [17],[18]and[19] will now be blank
        //and all the other cars will have mooved closer to the begining of the array or line
        for(i=0;i<MAXSIZE;i++){
            *customer = *temp;
            customer++;
            temp++;
        }
        num_customers-=3;
        idx-=2;
    }
    return;
}

// this function clears the wash bay and if possible moves the next three cars in the wash bay
void clear_wash_bay(Customer *customer, Customer *wash_Bay){
    int i=0;

    Customer wash = *wash_Bay;
    Customer *tempwash;// array to store customer details
    tempwash = (Customer*)calloc(WASHSIZE,sizeof(Customer));

    if(idx<=2 || num_washbay==0){
        printf("Not Enough cars in wash bay");
        return;
    }else{

        for(i=0;i<WASHSIZE;i++){
            *wash_Bay = *tempwash;
            wash_Bay++;
            tempwash++;
        }
        *wash_Bay = wash;

        if(idx>=3){
            populate_wash_bay(customer, wash_Bay);
            printf("\n The next three cars in line have gone into the wash bay\n");
        }else{
            num_washbay=0;
            //no message printed because not enough cars to fill the wash bay
        }
    }
    return;
}
//this function simple stores all the data from the file to a buffer array
void returningCustomers(){
    Customer temp1;//used as a reading destination
    Customer bufferarr[99];//stores all the customers that visit the car wash
    int i=0;
    fh_output = fopen("Customers.txt", "r");//opens the file for reading

    while(fread(&temp1, sizeof(Customer), 1, fh_output)){//continuously reads the file for the written Customer sized structs
        bufferarr[i] = temp1;
        i++;
    }
    fclose(fh_output);//closes the file
    findReturning(bufferarr,i);

    return;
}
//this function just finds the license plates that apear in the file more than once
void findReturning(Customer bufferarr[99],int count){
    Customer returning[99];// stores the info of the individually returning customers
    int frequency[99], fidx=0;
    bool duplicate = false;
    int j=0,i=0;
    for(j=0;j<i;j++){
        duplicate = false;
        for(i=0;i<count;i++){
            for(int k=0;k<count;k++){
                if(bufferarr[j].license_plate == returning[k].license_plate && j!=k){
                    duplicate= true;
                }
            }
            if(duplicate == true){
                break;
            }
            if(bufferarr[j].license_plate == bufferarr[i].license_plate && j!=i){
                returning[fidx]= bufferarr[j];
                frequency[fidx]+=1;
            }

        }
        if(duplicate==false){
            fidx+=1;
        }
    }
    displayReturning(returning, bufferarr, frequency, fidx, count);
    return;
}
//this function prints the information for the returning customers
void displayReturning(Customer returning[99], Customer bufferarr[99], int frequency[99], int i,int count){
    float totalSpent=0;
    int mostFrequent=frequency[0], mostFrequentIdx=0;

    //finding the returning customers Grand totals
    printf("\nThe Returning Customers are:\n");
    for(int j=0;j<i;j++){
        totalSpent=0;
        for(int k=0;k<count;k++){
            if(returning[j].license_plate==bufferarr[k].license_plate){
                totalSpent+=bufferarr[k].totalCost;
            }
        }
        printf("\nName: %s",returning[j].name);
        printf("\nLicense Plate: %s", returning[j].license_plate);
        printf("\nGrand Total Spent $%.2f", totalSpent);
        printf("\nFrequency: %d",frequency[j]);
        printf("\n\n");
    }
    //finding the most returning customers
    printf("\n\nThe most Returning Customer is: ");
    for(int j=1;j<i;j++){
        if(mostFrequent<frequency[j]){
            mostFrequent=frequency[j];
            mostFrequentIdx =j;//finding the index of the highest returning customer
        }
    }
    printf("\nName: %s",returning[mostFrequentIdx].name);
    printf("\nLicense Plate: %s", returning[mostFrequentIdx].license_plate);
    totalSpent=0;
    for(int k=0;k<count;k++){//simple scans the buffer array for the license plate
        if(returning[mostFrequentIdx].license_plate==bufferarr[k].license_plate){
            totalSpent+=bufferarr[k].totalCost;//adds up that customers total spend
        }
    }
    printf("\nGrand Total Spent: $%.2f", totalSpent);
    printf("\nGrand Total Spent After 20%% discount: $%.2f", totalSpent*.8);
    printf("\nFrequency: %d",frequency[mostFrequentIdx]);
    printf("\n\n");
    return;
}

void displayDayReport(DayReport *Report){
    Customer temp1;//used as a reading destination
    //Customer bufferarr[99];//stores all the customers that visit the car wash
    int i=0;
    fh_output = fopen("Customers.txt", "r");//opens the file for reading

    while(fread(&temp1, sizeof(Customer), 1, fh_output)){//continuously reads the file for the written Customer sized structs
        Report->totalSales += temp1.receiptTotal;
        Report->totalTips += temp1.tip;
        Report->totalCardFee += temp1.cardfee;
        for(i=0;i<6;i++){
            switch (temp1.services[i]){
            case 1://Wash and Vacuum
                Report->washAndVacuumSales += 2500.00;
                break;
            case 2://Engine Wash
                Report->engineWashSales += 2000.00;
                break;
            case 3://Polishing
                Report->polishingSales += 3500.00;
                break;
            case 4://Buffing
                Report->buffingSales += 5500.00;
                break;
            case 5://Roof Cleaning
                Report->roofCleaningSales += 3200.00;
                break;
            case 6://Detailing/Interior Shampooing
                Report->detailingSales += 7500.00;
                break;
            }
        }
    }
    fclose(fh_output);//closes the file

    //outputs the totals to the terminal
    printf("\n\t\t*****Daily Totals*****\n");
    printf("\nTotal Customers served: %d", Report->totalCustomers);
    printf("\nTotal Wash and Vacuum Sales: $%.2f", Report->washAndVacuumSales);
    printf("\nTotal Engine Wash Sales: $%.2f", Report->engineWashSales);
    printf("\nTotal Polishing: $%.2f", Report->polishingSales);
    printf("\nTotal Buffing Sales: $%.2f", Report->buffingSales);
    printf("\nTotal Roof Cleaning Sales: $%.2f", Report->roofCleaningSales);
    printf("\nTotal Detailing/Interior Shampooing: $%.2f", Report->detailingSales);
    printf("\nTotal Tips Collected: $%.2f", Report->totalTips);
    printf("\nTotal Cardfees Charged: $%.2f", Report->totalCardFee);
    printf("\n\nTotal Made at the Car Wash: $%.2f", Report->totalSales);

    return;
}

